const fs = require("fs");
const path = require("path");
const puppeteer = require("puppeteer");
const { login, obterChamados } = require("./login");
const { enviarMensagem } = require("./telegram");

// Fun√ß√£o para traduzir SLA
function traduzirSLA(sla) {
  if (!sla) return "-";
  return sla
    .replace("On due", "No prazo")
    .replace("Due in", "Vence em")
    .replace("Overdue", "Vencido");
}

const CAMINHO_JSON = path.join(__dirname, "..", "chamados.json");

async function monitorarChamados() {
  console.log("üîé Verificando chamados...");

  const browser = await puppeteer.launch({
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();

  try {
    // --- Login ---
    await login(page, process.env.MS_USER, process.env.MS_PASS);

    // --- Extrair chamados ---
    const todosChamados = await obterChamados(page);
    console.log(`‚úÖ Chamados extra√≠dos: ${todosChamados.length}`);

    // --- Identifica a data de hoje ---
    const hoje = new Date().toISOString().slice(0, 10);

    // --- L√™ ou cria o registro JSON ---
    let registro = {};
    if (fs.existsSync(CAMINHO_JSON)) {
      try {
        registro = JSON.parse(fs.readFileSync(CAMINHO_JSON, "utf8"));
      } catch {
        console.warn("‚ö†Ô∏è Erro lendo chamados.json, recriando...");
        registro = {};
      }
    }

    // --- üî• Limpeza autom√°tica: mant√©m s√≥ os √∫ltimos 3 meses ---
    const tresMesesAtras = new Date();
    tresMesesAtras.setMonth(tresMesesAtras.getMonth() - 3);

    for (const data in registro) {
      const dataObj = new Date(data);
      if (dataObj < tresMesesAtras) {
        delete registro[data];
      }
    }

    // --- Se n√£o existir a chave de hoje, cria ---
    if (!registro[hoje]) registro[hoje] = [];

    // --- Filtra apenas os novos chamados do dia ---
    const novosChamados = todosChamados.filter((c) => {
      const idNormalizado = c.id.trim();
      return !registro[hoje].includes(idNormalizado);
    });

    if (novosChamados.length > 0) {
      const mensagem =
        registro[hoje].length === 0
          ? "üåê Chamados existentes hoje:\n\n"
          : "üî¥ Novos chamados:\n\n";

      let texto = mensagem;

      // Adiciona ao texto e registra ID para n√£o repetir
      novosChamados.forEach((c) => {
        const idNormalizado = c.id.trim();
        texto += `üÜî ID: ${idNormalizado}\nüìå Assunto: ${c.assunto}\n‚ö†Ô∏è Estado: ${c.status}\n‚è∞ SLA: ${traduzirSLA(c.sla)}\n----------\n`;
        registro[hoje].push(idNormalizado);
      });

      // Salva atualiza√ß√£o no JSON
      fs.writeFileSync(CAMINHO_JSON, JSON.stringify(registro, null, 2));

      await enviarMensagem(texto);
      console.log(`üì¢ ${novosChamados.length} chamados enviados para Telegram!`);
    } else {
      console.log("‚úÖ Nenhum chamado novo hoje.");
    }

  } catch (err) {
    console.error("‚ùå Erro no monitor:", err.message);
    await enviarMensagem(`‚ùå Erro no monitor: ${err.message}`);
  } finally {
    await browser.close();
  }
}

// Para rodar isolado
if (require.main === module) {
  monitorarChamados();
}

module.exports = { monitorarChamados };

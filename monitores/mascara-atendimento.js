const puppeteer = require("puppeteer");
const { login, obterChamados } = require("./login");
const { enviarMensagem } = require("./telegram");

(async () => {
  console.log("üîé Verificando e-mails nos incidentes (monitor-mascara)...");

  const browser = await puppeteer.launch({
    headless: "new",
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();

  try {
    await login(page, process.env.MS_USER, process.env.MS_PASS);

    const urlFiltro =
      "https://servicos.viracopos.com/WOListView.do?viewID=6902&globalViewName=All_Requests";
    await page.goto(urlFiltro, { waitUntil: "networkidle2", timeout: 120000 });
    console.log("‚úÖ Lista de chamados carregada:", urlFiltro);

    await page.waitForSelector("#requests_list_body", { timeout: 60000 });
    console.log("‚úÖ Tabela de chamados encontrada");

    const chamados = await obterChamados(page);

    if (chamados.length === 0) {
      console.log("‚ÑπÔ∏è Nenhum chamado encontrado no filtro. Encerrando monitor...");
      return;
    }

    console.log("‚úÖ Chamados extra√≠dos:", chamados.length);

    let chamadosSemMascara = [];

    // trecho do formul√°rio
    const regexFormulario = /nos responda com as seguintes informa√ß(√µes|oes)/i;

    for (const chamado of chamados) {
      const urlChamado = `https://servicos.viracopos.com/WorkOrder.do?woMode=viewWO&woID=${chamado.id}&PORTALID=1`;
      await page.goto(urlChamado, { waitUntil: "networkidle2", timeout: 120000 });

      try {
        await page.waitForSelector(".zcollapsiblepanel__header", { timeout: 5000 });
        await page.click(".zcollapsiblepanel__header");
        console.log(`üìù Conversas expandidas no chamado ${chamado.id}`);
        await page.waitForTimeout(1000);
      } catch (e) {
        console.log(`‚ÑπÔ∏è N√£o foi necess√°rio expandir conversas no chamado ${chamado.id}`);
      }

      // üîç Log do texto capturado no body
      const dumpText = await page.evaluate(() => {
        return (document.body.innerText || "").replace(/\s+/g, " ").trim();
      });
      console.log(`üîç Texto capturado no chamado ${chamado.id}:`);
      console.log(dumpText.slice(0, 500)); // s√≥ primeiros 500 chars para n√£o poluir

      // üîç Log de iframes
      const frames = page.frames().map(f => f.url());
      console.log("üñºÔ∏è Iframes encontrados:", frames);

      // üîé Verifica√ß√£o no body principal (por enquanto)
      const contemMascara = await page.evaluate((regexSource) => {
        const texto = (document.body.innerText || "")
          .replace(/\s+/g, " ")
          .toLowerCase();
        const regex = new RegExp(regexSource, "i");
        return regex.test(texto);
      }, regexFormulario.source);

      if (!contemMascara) {
        console.log(`‚ö†Ô∏è Chamado ${chamado.id} sem formul√°rio de m√°scara`);
        chamadosSemMascara.push(chamado.id);
      } else {
        console.log(`‚úÖ Chamado ${chamado.id} cont√©m formul√°rio de m√°scara`);
      }
    }

    if (chamadosSemMascara.length > 0) {
      const lista = chamadosSemMascara.join(", ");
      const msg = `üö® Chamados encontrados sem formul√°rio de m√°scara: ${lista}`;
      console.log(msg);
      await enviarMensagem(msg);
    } else {
      console.log("‚úÖ Todos os chamados possuem formul√°rio de m√°scara!");
    }
  } catch (err) {
    console.error("‚ùå Erro no monitor-mascara:", err);
  } finally {
    await browser.close();
  }
})();
